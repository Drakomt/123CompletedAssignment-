version: "3"
services:
  # kafka:
  #   image: 'bitnami/kafka:latest'
  #   hostname: kafka
  #   container_name: kafka
  #   volumes:
  #     # - ./kafka-cluster-without-zk/kafka/data:/var/lib/kafka/data
  #     - "kafka_data:/bitnami"
  #   user: root
  #   ports:
  #    - '9092:9092'
  #    - "9094:9094"
  #   environment:
  #     # # KRaft settings
  #     # - KAFKA_CFG_NODE_ID=0
  #     # - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     # - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
  #     # # Listeners
  #     # - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
  #     # - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     # - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     # - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #     # - ALLOW_PLAINTEXT_LISTENER=yes

  #     # - KAFKA_ENABLE_KRAFT=yes
  #     # - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     # - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     # - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     # - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     # - KAFKA_BROKER_ID=1
  #     # - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
  #     # - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093;2@kafka2:9095;3@kafka3:9097
  #     # - ALLOW_PLAINTEXT_LISTENER=yes
      
  #     - KAFKA_ENABLE_KRAFT=yes
  #     - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka:9094
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
  #     - BITNAMI_DEBUG=yes
  #     - KAFKA_CFG_NUM_PARTITIONS=2
  #     # - KAFKA_CREATE_TOPICS= "events:1:1"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  kafka-producer:
    build:
      context: ./kafka-producer
    depends_on:
      - kafka
    volumes:
      - ./kafka-producer:/app
      - ./config.ini:/config.ini

  kafka-consumer:
    build:
      context: ./kafka-consumer
    depends_on:
      - kafka
      - mongodb
    volumes:
      - ./kafka-consumer:/app
      - ./config.ini:/config.ini

  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    # environment:
    #   - MONGO_INITDB_DATABASE=test
      # - MONGO_INITDB_ROOT_USERNAME=admin
      # - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - "27017:27017"
    volumes:
      # seeding scripts
      # - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      # named volumes
      - mongodb:/data/db
      # - mongoconfig:/data/configdb
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  redis-python:
    build:
      context: ./redis-python
    depends_on:
      - redis
    volumes:
      - ./redis-python:/app
      - ./config.ini:/config.ini

volumes:
  mongodb:
  kafka_data:
    driver: local

# version: '2'
# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     container_name: zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - 22181:2181
  
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     container_name: kafka
#     depends_on:
#       - zookeeper
#     ports:
#       - 29092:29092
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
#   mongodb:
#     image: mongo:latest
#     container_name: mongodb
#     ports:
#       - "27017:27017"

#   redis:
#     image: redis:latest
#     container_name: redis
#     ports:
#       - "6379:6379"



# version: '3'

# services:
#   kafka:
#     image: confluentinc/cp-kafka:latest
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     expose:
#       - "9093"
#     environment:
#       KAFKA_ADVERTISED_HOST_NAME: localhost
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#       KAFKA_CREATE_TOPICS: "test_topic:1:1"
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     restart: unless-stopped

#   mongodb:
#     image: mongo:latest
#     container_name: mongodb
#     ports:
#       - "27017:27017"

#   redis:
#     image: redis:latest
#     container_name: redis
#     ports:
#       - "6379:6379"



# version: '3'

# services:
#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     restart: unless-stopped
#   kafka:
#     image: wurstmeister/kafka:latest
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     expose:
#       - "9093"
#     environment:
#       KAFKA_ADVERTISED_HOST_NAME: localhost
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#       KAFKA_CREATE_TOPICS: "test_topic:1:1"
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     restart: unless-stopped

#   mongodb:
#     image: mongo:latest
#     container_name: mongodb
#     ports:
#       - "27017:27017"

#   redis:
#     image: redis:latest
#     container_name: redis
#     ports:
#       - "6379:6379"





# version: '3.8'
# services:
#   kafka:
#     image: wurstmeister/kafka:latest
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_ADVERTISED_HOST_NAME: localhost
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#     # ports:
#     #   - "9092:9092"
#     # environment:
#     #   KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
#     #   KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#     #   KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
#     #   KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#     #   KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#     # volumes:
#     #   - /var/run/docker.sock:/var/run/docker.sock

#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"

#   mongodb:
#     image: mongo:latest
#     # environment:
#     #   MONGO_INITDB_ROOT_USERNAME: mongoadmin
#     #   MONGO_INITDB_ROOT_PASSWORD: admin12345
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongodata:/data/db

#   redis:
#     image: redis:latest
#     ports:
#       - "6379:6379"

#   kafka-producer:
#     build:
#       context: ./kafka-producer
#     depends_on:
#       - kafka
#     volumes:
#       - ./kafka-producer:/app

#   kafka-consumer:
#     build:
#       context: ./kafka-consumer
#     depends_on:
#       - kafka
#       - mongodb
#     volumes:
#       - ./kafka-consumer:/app
# volumes:
#   mongodata:
#     driver: local

